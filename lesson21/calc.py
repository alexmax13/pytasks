# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calc.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets


class Ui_MainWindow(object):
    def __init__(self):
        self.calc = Calculator()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(280, 410)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 280, 60))
        self.label.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.label.setMargin(15)

        self.btn_clear = QtWidgets.QPushButton(self.centralwidget)
        self.btn_clear.setGeometry(QtCore.QRect(0, 60, 70, 70))
        self.btn_clear.setStyleSheet("background-color: rgb(208, 212, 212);")
        self.btn_clear.setObjectName("btn_cancel")

        self.btn_pls_mns = QtWidgets.QPushButton(self.centralwidget)
        self.btn_pls_mns.setGeometry(QtCore.QRect(70, 60, 70, 70))
        self.btn_pls_mns.setStyleSheet("background-color: rgb(208, 212, 212);")
        self.btn_pls_mns.setObjectName("btn_pls_mns")

        self.btn_proc = QtWidgets.QPushButton(self.centralwidget)
        self.btn_proc.setGeometry(QtCore.QRect(140, 60, 70, 70))
        self.btn_proc.setStyleSheet("background-color: rgb(208, 212, 212);")
        self.btn_proc.setObjectName("btn_proc")

        self.btn_div = QtWidgets.QPushButton(self.centralwidget)
        self.btn_div.setGeometry(QtCore.QRect(210, 60, 70, 70))
        self.btn_div.setStyleSheet("background-color: rgb(253, 153, 44);")
        self.btn_div.setObjectName("btn_division")

        self.btn_9 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_9.setGeometry(QtCore.QRect(140, 130, 70, 70))
        self.btn_9.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_9.setObjectName("btn_9")

        self.btn_mul = QtWidgets.QPushButton(self.centralwidget)
        self.btn_mul.setGeometry(QtCore.QRect(210, 130, 70, 70))
        self.btn_mul.setStyleSheet("background-color: rgb(253, 153, 44);")
        self.btn_mul.setObjectName("btn_multipl")

        self.btn_7 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_7.setGeometry(QtCore.QRect(0, 130, 70, 70))
        self.btn_7.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_7.setObjectName("btn_7")

        self.btn_8 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_8.setGeometry(QtCore.QRect(70, 130, 70, 70))
        self.btn_8.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_8.setObjectName("btn_8")

        self.btn_6 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_6.setGeometry(QtCore.QRect(140, 200, 70, 70))
        self.btn_6.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_6.setObjectName("btn_6")

        self.btn_sub = QtWidgets.QPushButton(self.centralwidget)
        self.btn_sub.setGeometry(QtCore.QRect(210, 200, 70, 70))
        self.btn_sub.setStyleSheet("background-color: rgb(253, 153, 44);")
        self.btn_sub.setObjectName("btn_minus")

        self.btn_4 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_4.setGeometry(QtCore.QRect(0, 200, 70, 70))
        self.btn_4.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_4.setObjectName("btn_4")

        self.btn_5 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_5.setGeometry(QtCore.QRect(70, 200, 70, 70))
        self.btn_5.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_5.setObjectName("btn_5")

        self.btn_3 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_3.setGeometry(QtCore.QRect(140, 270, 70, 70))
        self.btn_3.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_3.setObjectName("btn_3")

        self.btn_add = QtWidgets.QPushButton(self.centralwidget)
        self.btn_add.setGeometry(QtCore.QRect(210, 270, 70, 70))
        self.btn_add.setStyleSheet("background-color: rgb(253, 153, 44);")
        self.btn_add.setObjectName("btn_plus")

        self.btn_1 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_1.setGeometry(QtCore.QRect(0, 270, 70, 70))
        self.btn_1.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_1.setObjectName("btn_1")

        self.btn_2 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_2.setGeometry(QtCore.QRect(70, 270, 70, 70))
        self.btn_2.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_2.setObjectName("btn_2")

        self.btn_dot = QtWidgets.QPushButton(self.centralwidget)
        self.btn_dot.setGeometry(QtCore.QRect(140, 340, 70, 70))
        self.btn_dot.setStyleSheet("background-color: rgb(208, 212, 212);")
        self.btn_dot.setObjectName("btn_dot")

        self.btn_equal = QtWidgets.QPushButton(self.centralwidget)
        self.btn_equal.setGeometry(QtCore.QRect(210, 340, 70, 70))
        self.btn_equal.setStyleSheet("background-color: rgb(253, 153, 44);")
        self.btn_equal.setObjectName("btn_equal")

        self.btn_0 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_0.setGeometry(QtCore.QRect(0, 340, 140, 70))
        self.btn_0.setStyleSheet("background-color: rgb(248, 253, 253);")
        self.btn_0.setObjectName("btn_0")

        self.init_buttons()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sanculator"))
        self.label.setText(_translate("MainWindow", "0"))
        self.btn_clear.setText(_translate("MainWindow", "C"))
        self.btn_pls_mns.setText(_translate("MainWindow", "+/-"))
        self.btn_proc.setText(_translate("MainWindow", "%"))
        self.btn_div.setText(_translate("MainWindow", "/"))
        self.btn_9.setText(_translate("MainWindow", "9"))
        self.btn_mul.setText(_translate("MainWindow", "x"))
        self.btn_7.setText(_translate("MainWindow", "7"))
        self.btn_8.setText(_translate("MainWindow", "8"))
        self.btn_6.setText(_translate("MainWindow", "6"))
        self.btn_sub.setText(_translate("MainWindow", "-"))
        self.btn_4.setText(_translate("MainWindow", "4"))
        self.btn_5.setText(_translate("MainWindow", "5"))
        self.btn_3.setText(_translate("MainWindow", "3"))
        self.btn_add.setText(_translate("MainWindow", "+"))
        self.btn_1.setText(_translate("MainWindow", "1"))
        self.btn_2.setText(_translate("MainWindow", "2"))
        self.btn_dot.setText(_translate("MainWindow", "."))
        self.btn_equal.setText(_translate("MainWindow", "="))
        self.btn_0.setText(_translate("MainWindow", "0"))


    def init_buttons(self):
        self.btn_0.clicked.connect(lambda: self.number_pressed(0))
        self.btn_1.clicked.connect(lambda: self.number_pressed(1))
        self.btn_2.clicked.connect(lambda: self.number_pressed(2))
        self.btn_3.clicked.connect(lambda: self.number_pressed(3))
        self.btn_4.clicked.connect(lambda: self.number_pressed(4))
        self.btn_5.clicked.connect(lambda: self.number_pressed(5))
        self.btn_6.clicked.connect(lambda: self.number_pressed(6))
        self.btn_7.clicked.connect(lambda: self.number_pressed(7))
        self.btn_8.clicked.connect(lambda: self.number_pressed(8))
        self.btn_9.clicked.connect(lambda: self.number_pressed(9))

        self.btn_add.clicked.connect(lambda: self.operation("+"))
        self.btn_sub.clicked.connect(lambda: self.operation("-"))
        self.btn_mul.clicked.connect(lambda: self.operation("*"))
        self.btn_div.clicked.connect(lambda: self.operation("/"))
        self.btn_proc.clicked.connect(lambda: self.operation("%"))

        self.btn_clear.clicked.connect(lambda: self.clear_calc())
        self.btn_equal.clicked.connect(lambda: self.label_result())

        self.btn_dot.clicked.connect(lambda: self.dot_pressed())

    def number_pressed(self, number):
        self.calc.insert_state(number)
        self.update_label()

    def dot_pressed(self):
        self.calc.insert_dot()
        self.update_label()

    def update_label(self):
        self.label.setText(self.calc.get_label_str())

    def operation(self, operation):
        self.calc.set_operation(operation)
        self.update_label()

    def label_result(self):
        self.calc.result()
        self.update_label()

    def clear_calc(self):
        self.calc.clear(True)
        self.update_label()


class Calculator:
    def __init__(self):
        self._state = .0
        self._operation = ""
        self._arg = .0
        self._is_decimal = False

    def is_arg_active(self):
        return len(self._operation) > 0

    def insert_state(self, number):
        if self.is_arg_active():
            if self._arg == 0:
                self._arg = number
            else:
                should_add_dot = False

                if self._arg % 1 == 0:
                    self._arg = int(self._arg)
                    should_add_dot = True

                result = str(self._state)
                if self._is_decimal and should_add_dot:
                    result += "."

                result = str(self._arg) + str(number)
                self._arg = float(result)

        else:
            if self._state == 0:
                self._state = number
            else:
                should_add_dot = False

                if self._state % 1 == 0:
                    self._state = int(self._state)
                    should_add_dot = True

                result = str(self._state)
                if self._is_decimal and should_add_dot:
                    result += "."

                result += str(number)
                self._state = float(result)

    def insert_dot(self):
        self._is_decimal = not self._is_decimal

    def get_label_str(self):
        if self.is_arg_active():
            value = self._arg
        else:
            value = self._state

        should_add_dot = False
        if value % 1 == 0:
            value = int(value)
            should_add_dot = True

        result = str(value)
        if self._is_decimal and should_add_dot:
            result += "."
        return result

    def set_operation(self, operation):
        self._operation = operation

    def get_operation(self):
        return self._operation

    def set_arg(self, arg):
        self._arg = arg

    def clear(self, clear_state=False):
        if clear_state:
            self._state = .0
        self._operation: str = ""
        self._arg = .0
        self._is_decimal = False

    def result(self):
        if self._operation == "+":
            self._state += self._arg
        if self._operation == "-":
            self._state -= self._arg
        if self._operation == "*":
            self._state *= self._arg
        if self._operation == "%":
            self._state *= self._arg / 100
        if self._operation == "/":
            if self._arg == 0:
                self._state = 0
            else:
                self._state /= self._arg

        self.clear(False)

    def negate(self):
        self._state *= -1                    # multiply by -1


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
